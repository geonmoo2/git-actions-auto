name: CI/CD Docker

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/git-actions-auto
  VERSION: ${{ github.sha }}
  NAME: go_cicd
  NETWORK_NAME: my_network
  MYSQL_CONTAINER_NAME: mysql-container
  DOCKER_COMPOSE_FILE: docker-compose.yml

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest  # self-hosted runner에서 ubuntu-latest로 변경 가능
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -L -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create Docker network
        run: |
          docker network create ${{ env.NETWORK_NAME }} || true

      - name: Pull Docker images
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest

      - name: Deploy Application with Docker Compose
        run: |
          # Stop and remove existing containers if they exist
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} down || true
          # Start new containers
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d
